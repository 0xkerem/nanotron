#!/bin/bash
#SBATCH --job-name=doremi_training
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1          # crucial - only 1 task per dist per node!
#SBATCH --gres=gpu:4
#SBATCH --exclusive
#SBATCH --partition=hopper-prod
#SBATCH -o /fsx/phuc/slurm_logs/doremi/%x-%j-train.out
#SBATCH --qos=high

set -x -e
source /admin/home/phuc_nguyen/.bashrc

# a100
export CUDA_HOME=/usr/local/cuda-12.2

export NCCL_ASYNC_ERROR_HANDLING=1

# AWS specific
export NCCL_PROTO=simple
export RDMAV_FORK_SAFE=1
export FI_EFA_FORK_SAFE=1
export FI_EFA_USE_DEVICE_RDMA=1
export FI_PROVIDER=efa
export FI_LOG_LEVEL=1
export NCCL_IB_DISABLE=1
export NCCL_SOCKET_IFNAME=ens

# conda activate megatron_bigcode_a100
source activate /admin/home/phuc_nguyen/miniconda3/envs/nanotron-dev

echo "START TIME: $(date)"

SCRIPT_REPO=/fsx/phuc/projects/nanotron
pushd $SCRIPT_REPO
export CUDA_DEVICE_MAX_CONNECTIONS=1
LOG_PATH=/fsx/phuc/project_logs/doremi/train_logs.txt

# Training setup
GPUS_PER_NODE=4
# so processes know who to talk to
MASTER_ADDR=$(scontrol show hostnames $SLURM_JOB_NODELIST | head -n 1)
MASTER_PORT=6000
NNODES=$SLURM_NNODES
NODE_RANK=$SLURM_PROCID
WORLD_SIZE=$(($GPUS_PER_NODE*$NNODES))

# File path setup
# CHECKPOINT_PATH=/fsx/nouamane/experiments/pretraining/starcoder2-1B/checkpoints_fix_rope  # Adjust: Directory to store the checkpoints
# Starcoder2 tokenizer and data paths in /fsx/nouamane
# TOKENIZER_FILE=/fsx/loubna/data/tokenizer/starcoder2-smol-internal-1/tokenizer.json
# WEIGHTS_TRAIN=/fsx/nouamane/projects/brrr/benchmarks/megatron_lm/train.txt
# WEIGHTS_VALID=/fsx/nouamane/projects/brrr/benchmarks/megatron_lm/valid.txt
# DATA_PATH=/fsx/bigcode/bigcode-training/tokenized_stack_no_pii/code/python/gpt2-preprocessed_content_document

# mkdir -p $CHECKPOINT_PATH/tensorboard

# sc2 1b
    #    --num-layers 24 \
    #    --hidden-size 2048 \
    #    --num-attention-heads 16 \

# sc2 7b
    #    --num-layers 42 \
    #    --hidden-size 4096 \
    #    --num-attention-heads 32 \


    #    --global-batch-size 128 \
# GPT_ARGS="\
#        --tensor-model-parallel-size 4 \
#        --pipeline-model-parallel-size 1 \
#        --num-layers 42 \
#        --hidden-size 4096 \
#        --num-attention-heads 32 \
#        --attention-head-type multiquery \
#        --init-method-std 0.02209 \
#        --seq-length 8192 \
#        --max-position-embeddings 8192 \
#        --use-rotary-position-embeddings \
#        --no-position-embedding \
#        --attention-dropout 0.1 \
#        --hidden-dropout 0.1 \
#        --micro-batch-size 1 \
#        --global-batch-size 512 \
#        --lr 0.0004 \
#        --min-lr 0.00004 \
#        --train-iters 1000 \
#        --lr-decay-iters 500000 \
#        --lr-decay-style cosine \
#        --lr-warmup-iters 2000 \
#        --weight-decay .1 \
#        --adam-beta2 .95 \
#        --clip-grad 1.0 \
#        --bf16 \
#        --use-flash-attn \
#        --log-interval 1 \
#        --save-interval 10000 \
#        --eval-interval 10000 \
#        --eval-iters 2 \
#        --valid-num-workers 0 \
# "

CMD=" \
    $SCRIPT_REPO/examples/doremi/train_doremi.py \
    --config-file $SCRIPT_REPO/examples/doremi/config_tiny_llama.yaml \
    "

export LAUNCHER="python -u -m torch.distributed.run \
    --nproc_per_node $GPUS_PER_NODE \
    --nnodes $NNODES \
    # --rdzv_endpoint $MASTER_ADDR:$MASTER_PORT
    "

echo $CMD

# hide duplicated errors using this hack - will be properly fixed in pt-1.12
# export TORCHELASTIC_ERROR_FILE=/tmp/torch-elastic-error.json

# This is needed for torch1.12.1 otherwise it doesn't link correctly, not sur what the issue was.
#export PATH="/usr/local/cuda-11.6/bin:$PATH"
#export LD_LIBRARY_PATH="/usr/local/cuda-11.6/lib64:$LD_LIBRARY_PATH"
#export LD_PRELOAD=$CUDA_HOME/lib/libnccl.so
#export LD_LIBRARY_PATH=$CUDA_HOME/efa/lib:$CUDA_HOME/lib:$CUDA_HOME/lib64:$LD_LIBRARY_PATH

# srun error handling:
# --wait=60: wait 60 sec after the first task terminates before terminating all remaining tasks
# --kill-on-bad-exit=1: terminate a step if any task exits with a non-zero exit code
SRUN_ARGS=" \
    --wait=60 \
    --kill-on-bad-exit=1 \
    "

# py-spy top -s -i -n -- $LAUNCHER --node_rank $SLURM_PROCID --role $SLURMD_NODENAME: $CMD
clear; srun $SRUN_ARGS --jobid $SLURM_JOB_ID bash -c "$LAUNCHER --node_rank \$SLURM_PROCID --role \$SLURMD_NODENAME: $CMD" 2>&1 | tee $LOG_PATH

echo "END TIME: $(date)"
